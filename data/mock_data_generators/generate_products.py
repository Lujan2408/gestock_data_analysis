"""
Generador de datos mockeados para la tabla Products de GESTOCK
Crea productos diversos con categorÃ­as, precios realistas y mÃ¡rgenes variables
"""

import pandas as pd
import random
from datetime import datetime, timedelta

def generate_products(num_products=85):
    """
    Genera datos mockeados para productos
    
    Args:
        num_products (int): NÃºmero de productos a generar
    
    Returns:
        pandas.DataFrame: DataFrame con datos de productos
    """
    
    # CategorÃ­as de productos con datos especÃ­ficos
    product_categories = {
        "ElectrÃ³nicos": {
            "products": [
                "Smartphone Samsung", "iPhone", "Laptop HP", "Laptop Dell", "Tablet Android",
                "Smart TV 43\"", "Smart TV 55\"", "Auriculares Bluetooth", "Cargador Universal",
                "Mouse InalÃ¡mbrico", "Teclado MecÃ¡nico", "Monitor 24\"", "Parlante Bluetooth",
                "CÃ¡mara Digital", "Consola Gaming"
            ],
            "price_range": (150000, 3500000),
            "cost_margin": (0.6, 0.8),  # Costo es 60-80% del precio
            "suppliers": ["TechDistributor", "ElectroImport", "DigitalSupply", "TechWorld"]
        },
        "Ropa": {
            "products": [
                "Camiseta Polo", "Jean ClÃ¡sico", "Vestido Casual", "Chaqueta Deportiva",
                "Zapatos Casuales", "Zapatillas Deportivas", "Camisa Formal", "PantalÃ³n Formal",
                "Blusa Mujer", "Sudadera", "Short Deportivo", "Falda", "Bufanda", "Gorra"
            ],
            "price_range": (25000, 350000),
            "cost_margin": (0.4, 0.6),
            "suppliers": ["ModaImport", "TextilSupply", "FashionDist", "RopaTotal"]
        },
        "Alimentos": {
            "products": [
                "Arroz Premium 1kg", "Aceite Vegetal 1L", "AzÃºcar Blanca 1kg", "Sal Marina 500g",
                "Pasta Integral 500g", "Cereal Granola", "Leche Entera 1L", "Yogurt Natural",
                "Pan Integral", "Galletas Avena", "CafÃ© Premium 250g", "TÃ© Verde", "Miel Natural"
            ],
            "price_range": (3500, 45000),
            "cost_margin": (0.7, 0.85),
            "suppliers": ["AlimentosDist", "NutriSupply", "FoodImport", "AgriDistributor"]
        },
        "Hogar": {
            "products": [
                "Detergente LÃ­quido 1L", "JabÃ³n en Barra", "Papel HigiÃ©nico 12u", "Servilletas",
                "Ambientador", "Limpiador Multiusos", "Escoba", "Trapero", "Balde PlÃ¡stico",
                "Toalla BaÃ±o", "SÃ¡banas Queen", "Almohada Memory", "Cortina BaÃ±o"
            ],
            "price_range": (8000, 120000),
            "cost_margin": (0.5, 0.7),
            "suppliers": ["HogarSupply", "CleanDistributor", "HomeImport", "DomesticSupply"]
        },
        "Salud": {
            "products": [
                "AcetaminofÃ©n 500mg", "Ibuprofeno 400mg", "Vitamina C", "Alcohol AntisÃ©ptico",
                "Vendas ElÃ¡sticas", "TermÃ³metro Digital", "Mascarillas N95", "Gel Antibacterial",
                "Protector Solar SPF50", "Shampoo Anticaspa", "Crema Hidratante", "Suero Oral"
            ],
            "price_range": (12000, 85000),
            "cost_margin": (0.6, 0.75),
            "suppliers": ["FarmaDistributor", "HealthSupply", "MediImport", "SaludTotal"]
        },
        "ConstrucciÃ³n": {
            "products": [
                "Cemento Gris 50kg", "Arena Fina mÂ³", "Grava mÂ³", "Ladrillo ComÃºn u100",
                "Varilla 12mm 6m", "Alambre Galvanizado", "Clavos 2\" 1kg", "Tornillos Varios",
                "Pintura Blanca 1gal", "Brocha 4\"", "Rodillo", "Tubo PVC 4\" 6m", "Llave Agua"
            ],
            "price_range": (15000, 280000),
            "cost_margin": (0.65, 0.8),
            "suppliers": ["ConstruMax", "MaterialesPro", "FerreDistribuidor", "BuildSupply"]
        },
        "Oficina": {
            "products": [
                "Papel Bond A4 500h", "BolÃ­grafos Azul 12u", "LÃ¡pices HB 12u", "Marcadores",
                "Carpetas Manila", "Archivador AZ", "Calculadora BÃ¡sica", "Grapadora",
                "Perforadora", "Pegamento", "Cinta Adhesiva", "Clips MetÃ¡licos", "Post-it"
            ],
            "price_range": (2500, 65000),
            "cost_margin": (0.5, 0.65),
            "suppliers": ["OfficeSupply", "PapelerÃ­aDist", "EducaImport", "OfficeMax"]
        }
    }
    
    products = []
    product_id = 1
    start_date = datetime(2022, 6, 1)
    
    # Distribuir productos por categorÃ­a
    products_per_category = num_products // len(product_categories)
    remaining_products = num_products % len(product_categories)
    
    for category, category_data in product_categories.items():
        # NÃºmero de productos para esta categorÃ­a
        category_count = products_per_category
        if remaining_products > 0:
            category_count += 1
            remaining_products -= 1
        
        available_products = category_data["products"]
        price_min, price_max = category_data["price_range"]
        cost_min, cost_max = category_data["cost_margin"]
        suppliers = category_data["suppliers"]
        
        for i in range(category_count):
            # Seleccionar producto (repetir si es necesario)
            product_base = available_products[i % len(available_products)]
            
            # Agregar variaciones si hay repeticiÃ³n
            if i >= len(available_products):
                variations = ["Premium", "EconÃ³mico", "Deluxe", "BÃ¡sico", "Pro"]
                product_name = f"{product_base} {random.choice(variations)}"
            else:
                product_name = product_base
            
            # Generar precio y costo
            price = random.randint(price_min, price_max)
            cost_margin = random.uniform(cost_min, cost_max)
            cost_price = round(price * cost_margin)
            profit_margin = round(((price - cost_price) / price) * 100, 1)
            
            product = {
                'id': product_id,
                'name': product_name,
                'category': category,
                'price': price,
                'cost_price': cost_price,
                'profit_margin': profit_margin,
                'supplier': random.choice(suppliers),
                'description': f"{product_name} - {category}",
                'created_at': start_date + timedelta(days=random.randint(0, 500))
            }
            
            products.append(product)
            product_id += 1
    
    return pd.DataFrame(products)

def save_products_csv(df, filename='products.csv'):
    """
    Guarda el DataFrame de productos en un archivo CSV
    
    Args:
        df (pandas.DataFrame): DataFrame con datos de productos
        filename (str): Nombre del archivo CSV
    """
    filepath = f'../raw/{filename}'
    df.to_csv(filepath, index=False, encoding='utf-8')
    print(f"âœ… Archivo {filename} guardado con {len(df)} productos")
    print(f"ðŸ“Š DistribuciÃ³n por categorÃ­a:")
    print(df['category'].value_counts().to_string())
    print(f"\nðŸ’° Rango de precios por categorÃ­a:")
    price_stats = df.groupby('category')['price'].agg(['min', 'max', 'mean']).round(0)
    print(price_stats.to_string())

if __name__ == "__main__":
    # Generar datos
    products_df = generate_products(85)
    
    # Mostrar preview
    print("ðŸ“¦ PREVIEW DE PRODUCTOS GENERADOS:")
    print("="*50)
    print(products_df.head(10))
    print(f"\nTotal productos: {len(products_df)}")
    
    # Guardar archivo
    save_products_csv(products_df)