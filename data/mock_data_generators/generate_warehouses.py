"""
Generador de datos mockeados para la tabla Warehouses de GESTOCK
Crea almacenes distribuidos entre negocios con ubicaciones realistas
"""

import pandas as pd
import random
from datetime import datetime, timedelta

def generate_warehouses(businesses_df, warehouses_per_business_range=(2, 4)):
    """
    Genera datos mockeados para almacenes basados en los negocios existentes
    
    Args:
        businesses_df (pandas.DataFrame): DataFrame con datos de negocios
        warehouses_per_business_range (tuple): Rango de almacenes por negocio
    
    Returns:
        pandas.DataFrame: DataFrame con datos de almacenes
    """
    
    # Tipos de almacenes seg√∫n el tipo de negocio
    warehouse_types = {
        "Supermercado": ["Almac√©n Principal", "Bodega Refrigerados", "Dep√≥sito Secos"],
        "Farmacia": ["Almac√©n Medicamentos", "Bodega General", "Refrigerados"],
        "Ferreter√≠a": ["Bodega Principal", "Almac√©n Herramientas", "Dep√≥sito Materiales"],
        "Librer√≠a": ["Almac√©n Libros", "Bodega Papeler√≠a", "Dep√≥sito General"],
        "Tienda de Electr√≥nicos": ["Almac√©n Principal", "Bodega Accesorios", "Dep√≥sito Reparaciones"],
        "Boutique": ["Almac√©n Ropa", "Bodega Temporada", "Showroom"],
        "Almac√©n Mayorista": ["Bodega Principal", "Almac√©n A", "Almac√©n B", "Dep√≥sito Distribuci√≥n"],
        "Distribuidora": ["Centro Distribuci√≥n", "Almac√©n Norte", "Almac√©n Sur", "Bodega Central"]
    }
    
    # Tipos de direcciones por ciudad
    address_patterns = {
        "Medell√≠n": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Transversal {0} #{1}-{2}"],
        "Bogot√°": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Diagonal {0} #{1}-{2}"],
        "Cali": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Avenida {0} #{1}-{2}"],
        "Barranquilla": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "V√≠a {0} #{1}-{2}"],
        "Cartagena": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Avenida {0} #{1}-{2}"],
        "Bucaramanga": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Transversal {0} #{1}-{2}"],
        "Pereira": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Avenida {0} #{1}-{2}"],
        "Manizales": ["Carrera {0} #{1}-{2}", "Calle {0} #{1}-{2}", "Transversal {0} #{1}-{2}"]
    }
    
    # Capacidades por tipo de negocio (en m¬≤)
    capacity_ranges = {
        "Supermercado": (200, 800),
        "Farmacia": (50, 200),
        "Ferreter√≠a": (150, 500),
        "Librer√≠a": (80, 300),
        "Tienda de Electr√≥nicos": (100, 400),
        "Boutique": (60, 250),
        "Almac√©n Mayorista": (500, 2000),
        "Distribuidora": (800, 3000)
    }
    
    warehouses = []
    warehouse_id = 1
    
    for _, business in businesses_df.iterrows():
        business_type = business['business_type']
        city = business['city']
        business_id = business['id']
        
        # Determinar n√∫mero de almacenes para este negocio
        min_warehouses, max_warehouses = warehouses_per_business_range
        
        # Negocios m√°s grandes tienen m√°s almacenes
        if business['size'] == 'Grande':
            num_warehouses = random.randint(max_warehouses, max_warehouses + 1)
        elif business['size'] == 'Mediana':
            num_warehouses = random.randint(min_warehouses + 1, max_warehouses)
        else:  # Peque√±a
            num_warehouses = random.randint(min_warehouses, min_warehouses + 1)
        
        # Obtener tipos de almacenes disponibles
        available_types = warehouse_types.get(business_type, ["Almac√©n Principal", "Bodega General"])
        capacity_min, capacity_max = capacity_ranges.get(business_type, (100, 500))
        
        for i in range(num_warehouses):
            # Seleccionar tipo de almac√©n
            if i < len(available_types):
                warehouse_name = available_types[i]
            else:
                warehouse_name = f"Almac√©n {i + 1}"
            
            # Generar direcci√≥n
            address_formats = address_patterns.get(city, ["Carrera {0} #{1}-{2}"])
            address_format = random.choice(address_formats)
            
            # N√∫meros realistas para direcciones colombianas
            carrera_calle = random.randint(1, 80)
            numero1 = random.randint(10, 150)
            numero2 = random.randint(10, 99)
            address = address_format.format(carrera_calle, numero1, numero2)
            
            # Agregar barrio/sector
            barrios = {
                "Medell√≠n": ["El Poblado", "Laureles", "Envigado", "La Am√©rica", "Robledo"],
                "Bogot√°": ["Chapinero", "Zona Rosa", "Suba", "Kennedy", "Fontib√≥n"],
                "Cali": ["El Pe√±√≥n", "San Fernando", "Granada", "Normand√≠a", "Ciudad Jard√≠n"],
                "Barranquilla": ["El Prado", "Alto Prado", "Villa Country", "Las Flores", "Centro"],
                "Cartagena": ["Bocagrande", "El Laguito", "Manga", "Centro", "Pie de la Popa"],
                "Bucaramanga": ["Cabecera", "Ca√±averal", "Garc√≠a Rovira", "Centro", "Provenza"],
                "Pereira": ["El Jard√≠n", "Cuba", "Universidad", "Centro", "Pinares"],
                "Manizales": ["La Sultana", "Versalles", "Palogrande", "Centro", "Mil√°n"]
            }
            
            barrio = random.choice(barrios.get(city, ["Centro", "Norte", "Sur"]))
            full_address = f"{address}, {barrio}, {city}"
            
            # Generar otros datos
            capacity = random.randint(capacity_min, capacity_max)
            
            # Gerentes/responsables ficticios
            managers = [
                "Carlos Rodr√≠guez", "Mar√≠a Gonz√°lez", "Juan P√©rez", "Ana L√≥pez",
                "Luis Garc√≠a", "Carmen Mart√≠nez", "Roberto Silva", "Patricia Herrera",
                "Miguel Torres", "Luc√≠a Ram√≠rez", "Fernando Castro", "Isabel Moreno"
            ]
            
            # Costo operacional basado en capacidad y ciudad
            cost_per_m2 = {
                "Bogot√°": 25000, "Medell√≠n": 22000, "Cali": 20000, "Barranquilla": 18000,
                "Cartagena": 19000, "Bucaramanga": 16000, "Pereira": 15000, "Manizales": 14000
            }
            
            base_cost = cost_per_m2.get(city, 18000)
            operational_cost = capacity * base_cost + random.randint(-500000, 1000000)
            
            warehouse = {
                'id': warehouse_id,
                'name': warehouse_name,
                'address': full_address,
                'business_id': business_id,
                'capacity': capacity,
                'location_type': "Urbano" if random.random() > 0.15 else "Industrial",
                'manager_name': random.choice(managers),
                'operational_cost': operational_cost,
                'created_at': business['created_at'] + timedelta(days=random.randint(1, 90))
            }
            
            warehouses.append(warehouse)
            warehouse_id += 1
    
    return pd.DataFrame(warehouses)

def save_warehouses_csv(df, filename='warehouses.csv'):
    """
    Guarda el DataFrame de almacenes en un archivo CSV
    
    Args:
        df (pandas.DataFrame): DataFrame con datos de almacenes
        filename (str): Nombre del archivo CSV
    """
    filepath = f'../raw/{filename}'
    df.to_csv(filepath, index=False, encoding='utf-8')
    print(f"‚úÖ Archivo {filename} guardado con {len(df)} almacenes")
    print(f"üìä Distribuci√≥n por tipo de ubicaci√≥n:")
    print(df['location_type'].value_counts().to_string())
    print(f"\nüìä Almacenes por negocio:")
    print(df['business_id'].value_counts().sort_index().to_string())
    print(f"\nüìä Capacidad promedio por tipo de ubicaci√≥n:")
    capacity_stats = df.groupby('location_type')['capacity'].agg(['count', 'mean', 'min', 'max']).round(0)
    print(capacity_stats.to_string())

if __name__ == "__main__":
    # Cargar datos de negocios (debe existir)
    try:
        businesses_df = pd.read_csv('../raw/businesses.csv')
        print(f"üìã Cargados {len(businesses_df)} negocios")
    except FileNotFoundError:
        print("‚ùå Error: Primero debe ejecutar generate_businesses.py")
        exit(1)
    
    # Generar datos
    warehouses_df = generate_warehouses(businesses_df)
    
    # Mostrar preview
    print("\nüè≠ PREVIEW DE ALMACENES GENERADOS:")
    print("="*50)
    print(warehouses_df.head(10))
    print(f"\nTotal almacenes: {len(warehouses_df)}")
    
    # Guardar archivo
    save_warehouses_csv(warehouses_df)